# -*- text -*-
##
## ippool.conf -- Oracle queries for rlm_sqlippool
##
##  $Id$

allocate-begin = "commit"
start-begin = "commit"
alive-begin = "commit"
stop-begin = "commit"
on-begin = "commit"
off-begin = "commit"

 ## This query allocates an IP address from the Pool
 ## The ORDER BY clause of this query tries to allocate the same IP-address
 ## to the user that they had last session...
 allocate-find = "SELECT framedipaddress FROM ${ippool_table} \
  WHERE pool_name = '%{control:Pool-Name}' AND expiry_time < current_timestamp \
  AND rownum <= 1 \
  ORDER BY (username <> '%{SQL-User-Name}'), \
  (callingstationid <> '%{Calling-Station-Id}'), expiry_time \
  FOR UPDATE"

 ## This function is available if you want to use multiple pools
# allocate-find = "select msqlippool('%{SQL-User-Name}','%{control:Pool-Name}') from dual"

 ## If you prefer to allocate a random IP address every time, use this query instead
 #allocate-find = "SELECT framedipaddress FROM ${ippool_table} \
 # WHERE pool_name = '%{control:Pool-Name}' AND expiry_time < current_timestamp \
#  AND rownum <= 1 \
 # ORDER BY RANDOM() \
 # FOR UPDATE"


 ## If an IP could not be allocated, check to see whether the pool exists or not
 ## This allows the module to differentiate between a full pool and no pool
 ## Note: If you are not running redundant pool modules this query may be commented
 ## out to save running this query every time an ip is not allocated.
 pool-check = "SELECT id FROM (SELECT id FROM ${ippool_table} \
  WHERE pool_name='%{control:Pool-Name}') WHERE ROWNUM = 1"

 
 ## This query marks the IP address handed out by "allocate-find" as used
 ## for the period of "lease-duration" after which time it may be reused.
 allocate-update = "UPDATE ${ippool_table} \
  SET nasipaddress = '%{NAS-IP-Address}', pool_key = '${pool-key}', \
  callingstationid = '%{Calling-Station-Id}', username = '%{SQL-User-Name}', \
  expiry_time = current_timestamp + INTERVAL '${lease-duration}' second(1) \
  WHERE framedipaddress = '%I'"


 ## This query frees the IP address assigned to "pool-key" when a new request
 ## comes in for the same "pool-key". This means that either you are losing
 ## accounting Stop records or you use Calling-Station-Id instead of NAS-Port
 ## as your "pool-key" and your users are able to reconnect before your NAS
 ## has timed out their previous session. (Generally on wireless networks)
 ## (Note: If your pool-key is set to Calling-Station-Id and not NAS-Port
 ## then you may wish to delete the "AND nasipaddress = '%{Nas-IP-Address}'
 ## from the WHERE clause)
 allocate-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = current_timestamp - INTERVAL '1' second(1) \
  WHERE pool_key = '${pool-key}'"


 ## This query extends an IP address lease by "lease-duration" when an accounting
 ## START record arrives
 start-update = "UPDATE ${ippool_table} \
  SET expiry_time = current_timestamp + INTERVAL '${lease-duration}' second(1) \
  WHERE nasipaddress = '%{NAS-IP-Address}' \
  AND pool_key = '${pool-key}'"


 ## This query frees an IP address when an accounting
 ## STOP record arrives
 stop-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = current_timestamp - INTERVAL '1' second(1) \
  WHERE nasipaddress = '%{Nas-IP-Address}' \
  AND pool_key = '${pool-key}' \
  AND username = '%{SQL-User-Name}' \
  AND callingstationid = '%{Calling-Station-Id}'"


 ## This query extends an IP address lease by "lease-duration" when an accounting
 ## ALIVE record arrives
 alive-update = "UPDATE ${ippool_table} \
  SET expiry_time = current_timestamp + INTERVAL '${lease-duration}' second(1) \
  WHERE nasipaddress = '%{Nas-IP-Address}' \
  AND pool_key = '${pool-key}' \
  AND framedipaddress = '%{Framed-IP-Address}' \
  AND username = '%{SQL-User-Name}' \
  AND callingstationid = '%{Calling-Station-Id}'" 


 ## This query frees all IP addresses allocated to a NAS when an
 ## accounting ON record arrives from that NAS
 on-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = current_timestamp - INTERVAL '1' second(1) \
  WHERE nasipaddress = '%{Nas-IP-Address}'"


 ## This query frees all IP addresses allocated to a NAS when an
 ## accounting OFF record arrives from that NAS
 off-clear = "UPDATE ${ippool_table} \
  SET nasipaddress = '', pool_key = 0, callingstationid = '', \
  expiry_time = current_timestamp - INTERVAL '1' second(1) \
  WHERE nasipaddress = '%{Nas-IP-Address}'"

